Proximity Addon
Copyright (C) 2021 Pablo Tochez Anderson, Other Realms
contact@pablotochez.com
Licensed under GNU GPL-3.0-or-later

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU# General Public License for more details.


Created for Blender 2.90 and newer.
This add-on is assign vertex weights for vertex proximity weights and tension weights within a single object. 
This is not normally possible in Blender as objects cannot reference their own mesh data using either proximity modifier or Geometry Nodes.
Note that a number of physics simulations may not work correctly as modiying weights or colors causes the caches to be outdated. The best practice is to bake the simulations first with the 'Live' button disabled.
Furthermore, in some cases it is necessary to bake the proximity weights to image sequences.

--How to Install--

Click Clone or Download
Download as Zip
Open Blender, Preferences, Add-ons
Install -> choose the zip file

--install baking---
Beking requires the python PILLOW library. Install by clicking "Install PILLOW" in the baking panel. It will take a few minutes, you can see progress in the console. Once completed you must restart Blender.
    
--How To Use--
First add an object in 3D-view right panel, 'Proximity'> Add Object and choose object.
There are two modes, Proximity and Tension. Both modes only relate to the vertices within a single mesh and update on frame change or addon-parameter change.

Note: The updates don't occur in Edit Mode. All calculations are made on the unsubdivied mesh, using a subdiv modifier is OK but will be a bit slower.
Note: Instance meshes or meshes with multiple users won't work as expected as they share vertex weight data.
Note: All objects be of Mesh type with the exception of the target object in 'Objects Proximity' mode.

Vertex Group values can be mapped to vertex colours using geometry nodes, attribute ramp node. From 'Your Vertex Group' to 'Your vertex Col'.

----Proximity-------------
Assigns values to the threshold and ranged vertex groups. Only one groups is neccessary for output.

Threshold- Assigns a 0 OR 1 value to any vertex depending on whether the vertex is within the threshold distance from its closest neighbour.

Ranged- Adds an extra falloff useding the rangex parameter and uses 0 > 1 values.

----Tension---------------
Assigns values to the threshold and ranged vertex groups. Only one groups is neccessary for output.

Threshold- Assigns a 0 OR 1 value to any vertex that is being displaced beyond threshold distance.

Ranged- Assigns values 0 > 1. These values are the normalised values of the displaced distances from threshold negative to threshold positive.
for example. A threshold of 0.05 will give a range from -0.05 to 0.05. If a point moves closer to it's neighbouring point, further than 0.05m, it is considered compressing and negative. 
If it is move away further than 0.05m it is stretching and positive. These values are then converted to 0-0.5-1

0-------------0.5-----------1
compressed  Neutral     Stretched

----Objects Proximity-----
Usese object locations from each object in a collection to calculate proximity to a target location.
Note: Centres are determined by the objects origin and world location.

Object- The target object, does not receive weights and can be any type.

Neighbours- The maximum number of neighbours to look for

Collection- Collection containing objects (meshse) to assign weights to.

values to the threshold and ranged vertex groups. Only one groups is neccessary for output.

Threshold- Assigns a 0 OR 1 value to any vertex depending on whether the vertex is within the threshold distance from its closest neighbour.

Ranged- Adds an extra falloff useding the rangex parameter and uses 0 > 1 values.

---------------------------------------------------
Cumulative- adds weights with every update and is reset on the first scene frame.


Filter Group- Choose a vertex group to limit calculations to certain points, this will improve performance on complex meshes. Any vertex that is assigned and has a weight of over 0.01 will be included.

Cloth and particle simulations:
Cloth simulations will need to be baked before any calculations are made to avoid interfering with the cache. I highly recommend that you add a Corrective Smooth modifier to you mesh.
Particle simulation may only work correctly after the weights have been baked into textures. You can then use the texture input in the Particle Properties > Textures section. Particle textures should be assigned the generated UV's.



Baking pixel Sequence demo: https://youtu.be/QT_QXy7xpZE


